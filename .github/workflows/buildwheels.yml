name: build wheels

# Controls when the action will run.
on:
  # schedule test for nightly build
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # Note: the defaults are repeated within the 'env' section
    #       of some of the jobs so any change to the default
    #       need to be done (at least) twice!
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'Warning'
      download:
        description: 'download location ( dune | lund )'
        required: true
        default: 'dune'
      upload:
        description: 'upload (none | testpypi | pypi)'
        required: true
        default: 'none'
      branch:
        # note: this should be either 'master' or a tag of the form
        #       vN where 'N' is a legal python package version
        #       e.g. N=2.8.0rc1
        #       otherwise the distributions will not be generated
        #       and the build will fail
        description: 'core tag e.g. (master | v2.8.0) [master]'
        required: true
        default: 'master'
      fembranch:
        # note: this should be either 'master' or a tag of the form
        #       vN where 'N' is a legal python package version
        #       e.g. N=2.8.0rc1
        #       otherwise the distributions will not be generated
        #       and the build will fail
        description: 'fem tag e.g. (master | v2.8.0.1) [master]'
        required: true
        default: 'master'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # build packages
  build:
    name: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: [3.8]
    
    runs-on: ${{ matrix.os }}
    env:
      BRANCH: master
      FEMBRANCH: master
      DOWNLOAD: dune
    steps:
      - name: environmentCore
        if: github.event.inputs.branch != ''
        run: echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
      - name: environmentFem
        if: github.event.inputs.fembranch != ''
        run: echo "FEMBRANCH=${{ github.event.inputs.fembranch }}" >> $GITHUB_ENV
      - name: environmentDownload
        if: github.event.inputs.download != ''
        run: echo "DOWNLOAD=${{ github.event.inputs.download }}" >> $GITHUB_ENV
      - name: environmentUpload
        if: github.event.inputs.upload != ''
        run: echo "UPLOAD=${{ github.event.inputs.upload }}" >> $GITHUB_ENV
      - name: setup python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: starting
        uses: actions/checkout@v4
      - name: clone dune branch ${{ env.BRANCH }} and build python packages
        run: |
          set +e
          pip install scikit-build auditwheel
          ./clone-modules $BRANCH $FEMBRANCH $UPLOAD $DOWNLOAD
      - name: build wheels
        run: |
          pip wheel ./dist/dune-common* -w output
          auditwheel repair output/dune_common*.whl -w output
        shell: bash  
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  # https://github.com/marketplace/actions/pypi-publish
  upload:
    name: uploading
    env:
      UPLOAD: none
    needs: build
    runs-on: [ubuntu-latest]
    steps:
      - name: environment
        if: github.event.inputs.upload != ''
        run: echo "UPLOAD=${{ github.event.inputs.upload }}" >> $GITHUB_ENV
      - name: download artifacts
        uses: actions/download-artifact@v2
        continue-on-error: true
        with:
          name: packages
          path: dist
      - name: remove repository tar.gz since it can't be uploaded
        run: |
          rm dist/repos.tar.gz
        shell: bash
      - name: Publish package to ${{ env.UPLOAD }}
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.UPLOAD == 'pypi' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Publish package to ${{ env.UPLOAD }}
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ env.UPLOAD == 'testpypi' }}
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          ## this is needed so long as versioning for
          ## fem and core packages can differ (i.e. 2.8.0.x) but are uploaded
          ## in same script.
          ## Test if required version for core is available on pypi and use
          ## instead of git?
          # skip_existing: true
